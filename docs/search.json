[
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "",
    "section": "Overview",
    "text": "Overview\nThis report provides a reproducible pipeline for processing and geocoding CNPJs from the Annual Social Information Report (RAIS) of the Brazilian Ministry of Labor and Employment (MTE). The pipeline was developed by Gabriel Caldeira and Clara Penz, with further adaptations by Daniel Vartanian.\nFor instructions on how to run the pipeline, see the repository README."
  },
  {
    "objectID": "index.html#problem",
    "href": "index.html#problem",
    "title": "",
    "section": "Problem",
    "text": "Problem\nThe AcessoSAN project aims to develop methods for measuring and analyzing inequities in access to healthy food in favelas and other urban communities. Achieving this requires a reliable and up-to-date database of food retail establishments.\nThe RAIS database includes the CNPJs of companies operating in Brazil, among them food retail establishments. However, it does not provide geocoded information, which is required for spatial analyses. This pipeline addresses that limitation by processing and geocoding the CNPJs from the RAIS database."
  },
  {
    "objectID": "index.html#data-availability",
    "href": "index.html#data-availability",
    "title": "",
    "section": "Data Availability",
    "text": "Data Availability\n\n\n\nThe processed data are available in both rds and parquet formats through a dedicated repository on the Open Science Framework (OSF). A metadata file is included alongside the validated datasets.\nBecause the raw data are not publicly available, only authorized personnel can access the processed files. They are protected with RSA 4096-bit encryption (OpenSSL) and a 32-byte password to ensure data security.\nIf you already have access to the OSF repository and the project keys, click here to access the data. A backup copy of the raw data is also stored on OSF and can be accessed here. You can also retrieve these files directly from R using the osfr package."
  },
  {
    "objectID": "index.html#methods",
    "href": "index.html#methods",
    "title": "",
    "section": "Methods",
    "text": "Methods\nSource of Data\nThe data used in this report come from the following sources:\n\nBrazilian Ministry of Labor and Employment (MTE): Data on food retail establishments from the Annual Social Information Report (RAIS) provided by request (private data), used for company identification.\nBrazilian Federal Revenue Service (RFB): Data on legal entities from the National Register of Legal Entities (CNPJ).\nBrazilian Institute of Geography and Statistics (IBGE):\n\nMunicipality data via the geobr R package.\nOpen spatial datasets of Brazilian addresses from the National Address Register for Statistical Purposes (CNEFE), used for geocoding via the geocodebr R package.\n\n\nData Munging\nThe data munging follow the data science workflow outlined by Wickham et al. (2023), as illustrated in Figure 1. All processes were made using the Quarto publishing system (Allaire et al., n.d.), the R programming language (R Core Team, n.d.) and several R packages.\nFor data manipulation and workflow, priority was given to packages from the tidyverse, rOpenSci and r-spatial ecosystems, as well as other packages adhering to the tidy tools manifesto (Wickham, 2023).\n\n\nFigure 1: Data science workflow created by Wickham, Çetinkaya-Runde, and Grolemund.\n\n\nSource: Reproduced from Wickham et al. (2023).\n\n\n\nCode Style\nThe Tidyverse code style guide and design principles were followed to ensure consistency and enhance readability.\nReproducibility\nThe pipeline is fully reproducible and can be run again at any time. To ensure consistent results, the renv package (Ushey & Wickham, n.d.) is used to manage and restore the R environment. See the README file in the code repository to learn how to run it."
  },
  {
    "objectID": "index.html#set-the-environment",
    "href": "index.html#set-the-environment",
    "title": "",
    "section": "Set the Environment",
    "text": "Set the Environment\nLoad Packages\n\nlibrary(askpass)\nlibrary(brandr)\nlibrary(beepr)\nlibrary(dplyr)\nlibrary(fs)\nlibrary(geobr)\nlibrary(geocodebr)\nlibrary(ggplot2)\nlibrary(ggspatial)\nlibrary(googlesheets4)\nlibrary(here)\nlibrary(htmltools)\nlibrary(lockr) # github.com/danielvartan/lockr\nlibrary(magrittr)\nlibrary(nanoparquet)\nlibrary(orbis) # github.com/danielvartan/orbis\nlibrary(osfr)\nlibrary(purrr)\nlibrary(readr)\nlibrary(rvest)\nlibrary(rutils) # github.com/danielvartan/rutils\nlibrary(sf)\nlibrary(stringi)\nlibrary(stringr)\nlibrary(tidyr)\nlibrary(vroom)\nlibrary(zip)\n\nSet Keys\n\nosf_pat &lt;- Sys.getenv(\"OSF_PAT\") # askpass()\n\n\nosf_auth(osf_pat)\n\n\npublic_key &lt;- here(\"_ssh\", \"id_rsa.pub\")\n\n\nprivate_key &lt;- here(\"_ssh\", \"id_rsa\")\n\n\npassword &lt;- Sys.getenv(\"ACESSOSAN_PASSWORD\") # askpass()\n\nSet Google Sheets API\n\ngs4_auth(cache = \".secrets\")\n\nSet Input and Output Paths\n\ndir_inputs &lt;- here(\"1-inputs\")\ndir_parcial &lt;- here(\"2-parcial\")\n\n\nfor (i in c(dir_inputs, dir_parcial)) {\n  if (!dir_exists(i)) {\n    dir_create(i, recurse = TRUE)\n  }\n}\n\nSet Municipality Data\n\nmunicipios &lt;- c(\n  3550308, # São Paulo\n  2507507, # João Pessoa\n  3106200, # Belo Horizonte\n  4314902, # Porto Alegre\n  1721000, # Palmas\n  5300108, # Brasília\n  5208707  # Goiânia\n)\n\nSet Initial Variables\n\nset.seed(2025)"
  },
  {
    "objectID": "index.html#download-rais-raw-data",
    "href": "index.html#download-rais-raw-data",
    "title": "",
    "section": "Download RAIS Raw Data",
    "text": "Download RAIS Raw Data\n\nDownload File\n\nosf_raw_data_id &lt;- \"tdswp\"\n\n\nosf_raw_data_files &lt;-\n  osf_raw_data_id |&gt;\n  osf_retrieve_node() |&gt;\n  osf_ls_files(\n    type = \"file\",\n    pattern = \"rais_alim_\",\n    n_max = Inf\n  )\n\nosf_raw_data_files\n\n\nrais_raw_file &lt;-\n  osf_raw_data_files |&gt;\n  osf_download(path = dir_inputs, conflicts = \"overwrite\") |&gt;\n  extract2(\"local_path\")\n\nUnlock File\n\nrais_raw_file &lt;-\n  rais_raw_file |&gt;\n  unlock_file(\n    private_key = private_key,\n    suffix = \".lockr\",\n    remove_file = TRUE,\n    password = password\n  )"
  },
  {
    "objectID": "index.html#download-cnae-classification-table",
    "href": "index.html#download-cnae-classification-table",
    "title": "",
    "section": "Download CNAE Classification Table",
    "text": "Download CNAE Classification Table\n\n# classification_data\ncnae &lt;-\n  read_sheet(\n    ss = \"1ipCw2FM3aUOdRd4w55J5SUEgXDCogxWZF-NZi0A-o_4\",\n    sheet = \"Dataset\"\n  ) |&gt;\n    mutate(\n      uf = sigla_uf,\n      cnae = No.CNAE,\n      g1_g2_uf = g1g2_uf\n      # g0_uf = if_else(\n      #   g1_g2_uf == TRUE & g3_uf == FALSE & g4_uf == FALSE,\n      #   TRUE,\n      #   FALSE\n      # )\n    )\n#&gt; Auto-refreshing stale OAuth token.\n#&gt; ✔ Reading from \"Locais-Nova By CNAE\".\n#&gt; ✔ Range ''Dataset''.\n\ncnae |&gt; glimpse()\n#&gt; Rows: 540\n#&gt; Columns: 10\n#&gt; $ No.CNAE   &lt;chr&gt; \"4711302\", \"5611201\", \"4722902\", \"4721102\", \"4721101\", \"4…\n#&gt; $ desc_cnae &lt;chr&gt; \"Supermercado_1\", \"Restaurante\", \"Peixaria\", \"Padaria_rev…\n#&gt; $ sigla_uf  &lt;chr&gt; \"AC\", \"AC\", \"AC\", \"AC\", \"AC\", \"AC\", \"AC\", \"AC\", \"AC\", \"AC…\n#&gt; $ g0_uf     &lt;chr&gt; \"0\", \"1\", \"1\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"1\", \"0\", \"0…\n#&gt; $ g1g2_uf   &lt;chr&gt; \"1\", \"1\", \"1\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"1\", \"1\", \"0…\n#&gt; $ g3_uf     &lt;chr&gt; \"0\", \"0\", \"0\", \"1\", \"1\", \"0\", \"0\", \"1\", \"0\", \"0\", \"0\", \"0…\n#&gt; $ g4_uf     &lt;chr&gt; \"1\", \"0\", \"0\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"0\", \"1\", \"1…\n#&gt; $ uf        &lt;chr&gt; \"AC\", \"AC\", \"AC\", \"AC\", \"AC\", \"AC\", \"AC\", \"AC\", \"AC\", \"AC…\n#&gt; $ cnae      &lt;chr&gt; \"4711302\", \"5611201\", \"4722902\", \"4721102\", \"4721101\", \"4…\n#&gt; $ g1_g2_uf  &lt;chr&gt; \"1\", \"1\", \"1\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"1\", \"1\", \"0…"
  },
  {
    "objectID": "index.html#download-municipalities-data",
    "href": "index.html#download-municipalities-data",
    "title": "",
    "section": "Download Municipalities Data",
    "text": "Download Municipalities Data\n\n# municipalities_data\nuf &lt;- brazil_municipality(year = 2022)\n#&gt; Using year/date 2022\n\nuf |&gt; glimpse()\n#&gt; Rows: 5,570\n#&gt; Columns: 9\n#&gt; $ region_code       &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n#&gt; $ region            &lt;chr&gt; \"North\", \"North\", \"North\", \"North\", \"North\", \"Nor…\n#&gt; $ state_code        &lt;int&gt; 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 1…\n#&gt; $ state             &lt;chr&gt; \"Rondônia\", \"Rondônia\", \"Rondônia\", \"Rondônia\", \"…\n#&gt; $ federal_unit      &lt;chr&gt; \"RO\", \"RO\", \"RO\", \"RO\", \"RO\", \"RO\", \"RO\", \"RO\", \"…\n#&gt; $ municipality_code &lt;dbl&gt; 1100015, 1100023, 1100031, 1100049, 1100056, 1100…\n#&gt; $ municipality      &lt;chr&gt; \"Alta Floresta D'Oeste\", \"Ariquemes\", \"Cabixi\", \"…\n#&gt; $ latitude          &lt;dbl&gt; -11.935540305, -9.908462867, -13.499763460, -11.4…\n#&gt; $ longitude         &lt;dbl&gt; -61.99982390, -63.03326928, -60.54431358, -61.442…\n\n\nuf &lt;-\n  uf |&gt;\n  transmute(\n    uf = federal_unit,\n    co_municipio6 = str_sub(municipality_code, 1, 6),\n    no_municipio = municipality\n  )\n\nuf"
  },
  {
    "objectID": "index.html#download-rfb-data",
    "href": "index.html#download-rfb-data",
    "title": "",
    "section": "Download RFB Data",
    "text": "Download RFB Data\nSet Directories\n\ncnpj_dir &lt;- here(dir_inputs, \"CNPJ_2024\")\nestabelecimentos_dir &lt;- here(dir_inputs, \"CNPJ_2024\", \"1-ESTABELECIMENTOS\")\nempresas_dir &lt;- here(dir_inputs, \"CNPJ_2024\", \"2-EMPRESAS\")\nsocios_dir &lt;- here(dir_inputs, \"CNPJ_2024\", \"3-SOCIOS\")\ndemais_arquivos_dir &lt;- here(dir_inputs, \"CNPJ_2024\", \"4-DEMAIS_ARQUIVOS\")\n\n\nsubdiretorios &lt;- c(\n  \"1-ESTABELECIMENTOS\",\n  \"2-EMPRESAS\",\n  \"3-SOCIOS\",\n  \"4-DEMAIS_ARQUIVOS\"\n)\n\n\nfor (subdir in subdiretorios) {\n  caminho &lt;- file.path(cnpj_dir, subdir)\n\n  if (!file.exists(caminho))  dir.create(caminho, recursive = TRUE)\n}\n\nDownload Data\n\nroot &lt;- file.path( # Don´t change the function!\n    \"https://arquivos.receitafederal.gov.br\",\n    \"dados\",\n    \"cnpj\",\n    \"dados_abertos_cnpj\"\n  )\n\n\npath &lt;- root |&gt; file.path(paste0(\"2025-\", str_pad(1, 2, pad = 0)))\n\nurls &lt;-\n  path |&gt;\n  read_html() |&gt;\n  html_elements(\"a\") |&gt;\n  html_attr(\"href\") |&gt;\n  str_subset(\"\\\\.zip$\") %&gt;%\n  file.path(path, .)\n\n\nurls |&gt;\n  map_dbl(.f = get_file_size, .progress = TRUE) |&gt;\n  sum() |&gt;\n  as_fs_bytes()\n\n\nurls |&gt; download_file(dir = cnpj_dir)\n\nUnzip Data\n\nzip_files &lt;- cnpj_dir |&gt; dir_ls(type = \"file\", regexp = \"\\\\.zip$\")\n\n\nzip_files |&gt; map(\\(x) unzip(x, exdir = cnpj_dir), .progress = TRUE)\n\n\nzip_files |&gt; file_delete()\n\nMove Data\n\ncnpj_dir |&gt;\n  dir_ls(type = \"file\", regexp = \"\\\\.ESTABELE$\") |&gt;\n  file_move(estabelecimentos_dir)\n\n\ncnpj_dir |&gt;\n  dir_ls(type = \"file\", regexp = \"\\\\.EMPRECSV$\") |&gt;\n  file_move(empresas_dir)\n\n\ncnpj_dir |&gt;\n  dir_ls(type = \"file\", regexp = \"\\\\.SOCIOCSV$\") |&gt;\n  file_move(socios_dir)\n\n\ncnpj_dir |&gt;\n  dir_ls(type = \"file\") |&gt;\n  file_move(demais_arquivos_dir)"
  },
  {
    "objectID": "index.html#rais_processar_classificar.r",
    "href": "index.html#rais_processar_classificar.r",
    "title": "",
    "section": "02.01-rais_processar_classificar.R",
    "text": "02.01-rais_processar_classificar.R\n\nTrata os dados da RAIS e classifica os estabelecimentos como saudáveis.\nNota: foi disponibilizada ao grupo de pesquisa a base completa da RAIS para o ano de 2022. Não disponibilizaremos a base por motivos legais de permissão de uso.\n\nListar Municipios\n\nmunicipios &lt;-\n  tibble(co_municipio = as.character(municipios)) |&gt;\n  mutate(co_municipio6 = str_sub(co_municipio, 1, 6))\n\nmunicipios\n\n\n  \n\n\n\nProcessar Arquivo da RAIS\n\nrais &lt;- rais_raw_file |&gt; read_parquet()\n\nrais |&gt; glimpse()\n#&gt; Rows: 731,497\n#&gt; Columns: 30\n#&gt; $ X                        &lt;int&gt; 10, 17, 27, 31, 80, 85, 91, 103, 111, 119,…\n#&gt; $ nu_cei_vinculado         &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n#&gt; $ nu_cep_estab             &lt;int&gt; 6755185, 76650000, 95880000, 35600000, 790…\n#&gt; $ co_cnae95_classe         &lt;int&gt; 52248, 55212, 55247, 52124, 55212, 52132, …\n#&gt; $ nu_cnpj_cei              &lt;dbl&gt; 5046455000161, 30119065000111, 15393330000…\n#&gt; $ nu_cnpj_raiz             &lt;int&gt; 5046455, 30119065, 15393330, 2508004, 2756…\n#&gt; $ dt_abertura              &lt;chr&gt; \"2002-04-19\", \"2018-04-05\", \"2012-04-16\", …\n#&gt; $ dt_baixa                 &lt;chr&gt; \"\", \"\", \"\", \"\", \"2019-09-26\", \"2023-08-01\"…\n#&gt; $ dt_encerramento          &lt;chr&gt; \"\", \"\", \"\", \"\", \"2019-09-26\", \"2023-08-01\"…\n#&gt; $ ds_email_estab           &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#&gt; $ in_cei_vinculado         &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n#&gt; $ id_estab_participa_pat   &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n#&gt; $ in_rais_negativa         &lt;int&gt; 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, …\n#&gt; $ in_simples               &lt;int&gt; 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, …\n#&gt; $ co_municipio             &lt;int&gt; 355280, 521056, 430780, 310740, 500270, 41…\n#&gt; $ co_natureza_juridica     &lt;int&gt; 2062, 2135, 2135, 2062, 2135, 2062, 2062, …\n#&gt; $ no_logradouro            &lt;chr&gt; \"R SANTO ONOFRE 200 TERREO.\", \"R 01 SN QUA…\n#&gt; $ nu_logradouro            &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n#&gt; $ no_bairro                &lt;chr&gt; \"JARDIM SANTA ROSA\", \"RESIDENCIAL BENEDITO…\n#&gt; $ nu_tel_empresa           &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n#&gt; $ qt_vinculos_ativos       &lt;int&gt; 21, 0, 0, 1, 4, 0, 0, 4, 2, 0, 93, 4, 6, 1…\n#&gt; $ qt_vinculos_clt          &lt;int&gt; 21, 0, 0, 1, 4, 0, 0, 4, 2, 0, 93, 4, 6, 1…\n#&gt; $ qt_vinculos_estatutarios &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n#&gt; $ no_razao_social          &lt;chr&gt; \"ANSERVE COMERCIAL LTDA - ME\", \"0\", \"NÃO I…\n#&gt; $ in_tamanho_estab         &lt;int&gt; 5, 1, 1, 2, 2, 1, 1, 2, 2, 1, 6, 2, 3, 2, …\n#&gt; $ tp_estabelecimento       &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n#&gt; $ co_ibge_subsetor         &lt;int&gt; 16, 21, 13, 16, 21, 16, 21, 16, 16, 21, 16…\n#&gt; $ in_atividade_ano         &lt;int&gt; 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, …\n#&gt; $ co_cnae20_classe         &lt;int&gt; 47237, 56112, 56201, 47113, 56112, 47121, …\n#&gt; $ co_cnae20_subclasse      &lt;int&gt; 4723700, 5611201, 5620104, 4711302, 561120…\n\n\nFiltrar estabelecimentos que não estejam ativos.\n\n\nrais &lt;-\n  rais |&gt;\n  filter(in_atividade_ano == 9) |&gt;\n  filter(\n    in_rais_negativa == 0 | (in_rais_negativa == 1 & qt_vinculos_ativos &gt; 0)\n  )\n\n\nTraduzir porte do estabelecimento.\n\n\nrais &lt;-\n  rais |&gt;\n  mutate(\n    in_tamanho_estab = as.numeric(in_tamanho_estab),\n    tamanho_estab = case_when(\n      in_tamanho_estab &lt;= 3 ~ \"Até 9\",\n      in_tamanho_estab %in% c(4, 5) ~ \"10 a 49\",\n      in_tamanho_estab &gt;= 6 ~ \"50 ou mais\"\n    ),\n    tamanho_estab = factor(\n      tamanho_estab,\n      levels = c(\"Até 9\", \"10 a 49\", \"50 ou mais\")\n    )\n  )\n\n\nPadronizar códigos de município, CNAE e CNPJ.\n\n\nrais &lt;-\n  rais |&gt;\n  mutate(\n    cnae = sprintf(\"%07d\", as.integer(co_cnae20_subclasse)),\n    cnpj = str_pad(as.character(nu_cnpj_cei), 14, pad = \"0\"),\n    co_municipio6 = as.character(co_municipio)\n  ) |&gt;\n   select(cnae, cnpj, co_municipio6, qt_vinculos_ativos, tamanho_estab)\n\n\nJuntar as tabelas de UF e RAIS.\n\n\nrais &lt;- rais |&gt; left_join(uf, by = \"co_municipio6\")\n\n\nLoop com filtragem por município.\n\n\nfor (codigo in municipios$co_municipio) {\n  # Pegar o `code_6` correspondente.\n  codigo6 &lt;-\n    municipios |&gt;\n    filter(co_municipio == codigo) |&gt;\n    pull(co_municipio6)\n\n  # Criar diretório.\n  dir_saida &lt;- file.path(dir_parcial, codigo, \"rais\")\n  dir.create(dir_saida, recursive = TRUE, showWarnings = FALSE)\n\n  # Filtrar RAIS so do municipio.\n  rais_codigo &lt;- rais |&gt; filter(co_municipio6 == codigo6)\n\n  # Filtrar por UF e por CNAE.\n  rais_codigo &lt;- rais_codigo |&gt; semi_join(cnae, by = c(\"cnae\", \"uf\"))\n\n  # Processar apenas saudáveis.\n\n  rais_codigo |&gt;\n    semi_join(filter(cnae, g0_uf == 1), by = c(\"cnae\", \"uf\")) |&gt;\n    write_parquet(file.path(dir_saida, \"rais_g0.parquet\"))\n\n  # 1) Processar saudáveis.\n  rais_codigo |&gt;\n    semi_join(filter(cnae, g1_g2_uf == 1), by = c(\"cnae\", \"uf\")) |&gt;\n    write_parquet(file.path(dir_saida, \"rais_g1_g2.parquet\"))\n\n  # 2) Processar g3.\n  rais_codigo |&gt;\n    semi_join(filter(cnae, g3_uf == 1), by = c(\"cnae\", \"uf\")) |&gt;\n    write_parquet(file.path(dir_saida, \"rais_g3.parquet\"))\n\n  # 3) Processar g4.\n  rais_g4 &lt;-\n    rais_codigo |&gt;\n    semi_join(filter(cnae, g4_uf == 1), by = c(\"cnae\", \"uf\")) |&gt;\n    write_parquet(file.path(dir_saida, \"rais_g4.parquet\"))\n}"
  },
  {
    "objectID": "index.html#rais_processar_enderecos_cnpj.r",
    "href": "index.html#rais_processar_enderecos_cnpj.r",
    "title": "",
    "section": "02.02-rais_processar_enderecos_cnpj.R",
    "text": "02.02-rais_processar_enderecos_cnpj.R\nCarregar CNPJs de Referência de Todos os Tipos de RAIS\n\nListar municípios.\n\n\nmunicipios &lt;- c(\n  3550308, # São Paulo\n  2507507, # João Pessoa\n  3106200, # Belo Horizonte\n  4314902, # Porto Alegre\n  1721000, # Palmas\n  5300108, # Brasília\n  5208707  # Goiânia\n)\n\n\nlista_cnpjs &lt;- list()\n\nfor (mun in municipios) {\n  rais_dir &lt;- file.path(dir_parcial, mun, \"rais\")\n\n  arquivos_rais &lt;-\n    rais_dir |&gt;\n    list.files(\n      pattern = \"^rais_.*\\\\.parquet$\",\n      full.names = TRUE\n    )\n\n  for (arq in arquivos_rais) {\n    tipo &lt;- gsub(\"rais_|\\\\.parquet\", \"\", basename(arq))  # g0, g1_g2, g3, g4\n\n    rais_cnpj &lt;-\n      read_parquet(arq) |&gt;\n      select(cnpj) |&gt;\n      mutate(\n        cnpj = as.character(cnpj),\n        municipio = mun\n      ) |&gt;\n      distinct()\n\n    lista_cnpjs[[tipo]] &lt;- bind_rows(lista_cnpjs[[tipo]], rais_cnpj)\n  }\n}\n\nCarregar Referência de Municípios\n\nmunicipios_ref &lt;-\n  file.path(demais_arquivos_dir, \"F.K03200$Z.D50111.MUNICCSV\") |&gt;\n  vroom(\n    delim = \";\",\n    # encoding = \"Latin-1\",\n    col_names = c(\"MUNICIPIO_TOM\", \"no_municipio\"),\n    col_types = cols(.default = \"c\"),\n    show_col_types = FALSE\n  ) |&gt;\n  mutate(MUNICIPIO_TOM = as.character(MUNICIPIO_TOM))\n\nProcessar Estabelecimentos por Tipo de RAIS\n\nsaida_dir &lt;- file.path(dir_parcial, \"cnpj_enderecos_brasil\")\n\ndir.create(saida_dir, recursive = TRUE, showWarnings = FALSE)\n\n\narquivos_estab &lt;- list.files(estabelecimentos_dir, full.names = TRUE)\n\ntotal_arquivos &lt;- length(arquivos_estab)\n\n\nfor (tipo_rais in names(lista_cnpjs)) {\n  print(paste(\"Processando RAIS:\", tipo_rais))\n  cnpjs_rais &lt;- lista_cnpjs[[tipo_rais]]\n  lista_estab &lt;- list()\n\n  for (i in seq_along(arquivos_estab)) {\n    caminho_arquivo &lt;- arquivos_estab[i]\n    print(paste(\"Arquivo 'estabelecimentos'\", i, \"de\", total_arquivos))\n\n    tryCatch({\n      estab &lt;-\n        caminho_arquivo |&gt;\n        vroom(\n          delim = \";\",\n          # encoding = \"Latin-1\",\n          col_names = c(\n            \"CNPJ_BASICO\", \"CNPJ_ORDEM\", \"CNPJ_DV\",\n            \"IDENTIFICADOR_MATRIZ_FILIAL\", \"NOME_FANTASIA\",\n            \"SITUACAO_CADASTRAL\", \"DATA_SITUACAO_CADASTRAL\",\n            \"MOTIVO_SITUACAO_CADASTRAL\", \"NOME_CIDADE_EXTERIOR\", \"PAIS\",\n            \"DATA_INICIO_ATIVIDADE\", \"CNAE_FISCAL_PRINCIPAL\",\n            \"CNAE_FISCAL_SECUNDARIO\", \"tipo_logradouro\", \"logradouro\",\n            \"numero\", \"complemento\", \"bairro\", \"cep\", \"uf\", \"MUNICIPIO_TOM\",\n            \"DDD_1\", \"TELEFONE_1\", \"DDD_2\", \"TELEFONE_2\", \"DDD_FAX\", \"FAX\",\n            \"CORREIO_ELETRONICO\", \"SITUACAO_ESPECIAL\", \"DATA_SITUACAO_ESPECIAL\"\n          ),\n          col_types = cols(.default = \"c\"),\n          col_select = c(\n            \"CNPJ_BASICO\", \"CNPJ_ORDEM\", \"CNPJ_DV\", \"MUNICIPIO_TOM\",\n            \"uf\", \"tipo_logradouro\", \"logradouro\", \"numero\", \"complemento\",\n            \"bairro\", \"cep\"\n          ),\n          show_col_types = FALSE\n        )\n\n      # Ajustar CNPJs e CEP.\n      estab &lt;-\n        estab |&gt;\n        mutate(\n          CNPJ_BASICO = str_pad(CNPJ_BASICO, 8, pad = \"0\"),\n          CNPJ_ORDEM = str_pad(CNPJ_ORDEM, 4, pad = \"0\"),\n          CNPJ_DV = str_pad(CNPJ_DV, 2, pad = \"0\"),\n          cnpj = paste0(CNPJ_BASICO, CNPJ_ORDEM, CNPJ_DV),\n          cep =\n            cep |&gt;\n            as.character() |&gt;\n            str_pad(width = 8, side = \"left\", pad = \"0\"),\n          MUNICIPIO_TOM = as.character(MUNICIPIO_TOM)\n        ) |&gt;\n        semi_join(cnpjs_rais, by = \"cnpj\") |&gt;   # Pegar só CNPJs desta RAIS.\n        left_join(municipios_ref, by = \"MUNICIPIO_TOM\") |&gt;\n        select(cnpj, uf, no_municipio, tipo_logradouro, logradouro, numero, complemento, bairro, cep)\n\n      lista_estab[[length(lista_estab) + 1]] &lt;- estab\n    }, error = function(e){\n      message(\"Falha ao processar: \", caminho_arquivo, \" - \", e$message)\n    })\n  }\n\n  # Unir e salvar parquet por RAIS.\n  estab_total &lt;- bind_rows(lista_estab)\n\n  estab_total |&gt;\n    write_parquet(\n      file.path(saida_dir, paste0(\"cnpj_brasil_\", tipo_rais, \".parquet\"))\n    )\n\n  print(paste(\"Arquivo salvo:\", paste0(\"cnpj_brasil_\", tipo_rais, \".parquet\")))\n}"
  },
  {
    "objectID": "index.html#rais_geocodificar_estabelecimentos.r",
    "href": "index.html#rais_geocodificar_estabelecimentos.r",
    "title": "",
    "section": "02.03-rais_geocodificar_estabelecimentos.R",
    "text": "02.03-rais_geocodificar_estabelecimentos.R\n\nListar municípios.\n\n\nmunicipios &lt;- c(\n  3550308, # São Paulo\n  2507507, # João Pessoa\n  3106200, # Belo Horizonte\n  4314902, # Porto Alegre\n  1721000, # Palmas\n  5300108, # Brasília\n  5208707  # Goiânia\n)\n\n\nDefinir tipos de estabelecimento.\n\n\nclass &lt;- c(\"g0\", \"g1_g2\", \"g3\", \"g4\")\n\nLoop Sobre Arquivos de CNPJs\n\nfor (class_atual in class) {\n  # Extrair tipo do nome do arquivo.\n  message(\"&gt;&gt; Tipo identificado: \", class_atual)\n\n  # Ler arquivo de endereços e ajustar valores.\n  cnpj_enderecos &lt;-\n    file.path(\n      dir_parcial,\n      \"cnpj_enderecos_brasil\",\n      paste0(\"cnpj_brasil_\", class_atual, \".parquet\")\n    ) |&gt;\n    read_parquet()\n\n  # Ajustar valores.\n  cnpj_enderecos &lt;-\n    cnpj_enderecos |&gt;\n      mutate(\n        cep =\n          cep |&gt;\n          trimws() |&gt;\n          as.numeric() |&gt;\n          str_pad(pad = 0, width = 8),\n        endereco = paste(tipo_logradouro, logradouro),\n        numero =\n          numero |&gt;\n          iconv(from = \"latin1\", to = \"ASCII//TRANSLIT\") |&gt;\n          str_remove_all(\"\\\\D\") |&gt;\n          str_trim() |&gt;\n          as.numeric() |&gt;\n          as.character() |&gt;\n          suppressWarnings(),\n        municipio_utf8 =\n          no_municipio |&gt;\n          stri_trans_general(\"Latin-ASCII\") |&gt;\n          toupper()\n      ) |&gt;\n      select(cnpj, uf, municipio_utf8, endereco, numero, cep, bairro) |&gt;\n      mutate(\n        across(\n          .cols = where(is.character),\n          .fns = function(col) {\n              Encoding(col) &lt;- \"UTF-8\"\n\n              iconv(col, from = \"\", to = \"UTF-8\", sub = \"\")\n          }\n        )\n      )\n\n  # Definir campos de geocodificação.\n  campos &lt;- definir_campos(\n    estado = \"uf\",\n    municipio = \"municipio_utf8\",\n    logradouro = \"endereco\",\n    numero = \"numero\",\n    cep = \"cep\",\n    localidade = \"bairro\"\n  )\n\n  # Geocodificar endereços.\n  geocodificado &lt;- geocode(\n    enderecos = cnpj_enderecos,\n    campos_endereco = campos,\n    resultado_sf = FALSE,\n    verboso = TRUE,\n    cache = TRUE,\n    n_cores = 1,\n    resolver_empates = TRUE\n  )\n\n  # Selecionar variáveis finais.\n  geocodificado &lt;-\n    geocodificado |&gt;\n    select(cnpj, lat, lon) |&gt;\n    drop_na(all_of(c(\"lat\", \"lon\")))\n\n  # Converter para sf.\n  geocodificado_sf &lt;- st_as_sf(\n    geocodificado,\n    coords = c(\"lon\", \"lat\"),\n    crs = 4326\n  )\n\n  # Loop por municipio --------------------------------------------------\n\n  for (mun in municipios) {\n    message(\"  -&gt; Municipio: \", mun)\n\n    # Geometria do municipio.\n    geom_mun &lt;-\n      mun |&gt;\n      read_municipality(year = 2022) |&gt;\n      st_transform(crs = 4326)\n\n    # Filtrar endereços dentro do municipio.\n    geocodificado_mun &lt;-\n      geocodificado_sf |&gt;\n      st_join(geom_mun, join = st_within, left = FALSE)\n\n    # Converter de volta para data frame.\n    geocodificado_mun &lt;-\n      geocodificado_mun %&gt;% # Don´t change the pipe!\n      mutate(\n        lon = st_coordinates(.)[,1],\n        lat = st_coordinates(.)[,2]\n      ) |&gt;\n      st_drop_geometry() |&gt;\n      select(cnpj, lat, lon)\n\n    # Caminho do arquivo RAIS referente ao tipo atual.\n    rais_path &lt;- file.path(\n      dir_parcial,\n      mun,\n      \"rais\",\n      paste0(\"rais_\", class_atual, \".parquet\")\n    )\n\n    if (!file.exists(rais_path)) next\n\n    # Ler RAIS.\n    rais &lt;- read_parquet(rais_path)\n\n    # Join com coordenadas.\n    rais_geo &lt;-\n      rais |&gt;\n      left_join(geocodificado_mun, by = \"cnpj\")\n\n    # Salvar parquet (com nome do tipo)\n    caminho_saida &lt;- file.path(\n      dir_parcial,\n      mun,\n      \"rais\",\n      paste0(class_atual, \"_geocod.parquet\")\n    )\n\n    rais_geo |&gt; write_parquet(caminho_saida)\n  }\n}"
  },
  {
    "objectID": "index.html#visualize-the-data",
    "href": "index.html#visualize-the-data",
    "title": "",
    "section": "Visualize the Data",
    "text": "Visualize the Data\nSet Variables\n\nmunicipality &lt;- 3550308 # São Paulo\n\n\nclasses &lt;- c(\"g0\", \"g1_g2\", \"g3\", \"g4\")\n\n\ngeocoded_data_dir &lt;- file.path(\n  dir_parcial,\n  municipality,\n  \"rais\"\n)\n\nPrepare Data\n\nplot_data &lt;-\n  classes |&gt;\n  rev() |&gt;\n  map(\n    function(x) {\n      geocoded_data_dir |&gt;\n      path(paste0(x, \"_geocod.parquet\")) |&gt;\n      read_parquet() |&gt;\n      transmute(\n        class =\n          x |&gt;\n          str_to_upper() |&gt;\n          str_replace(\"_\", \"-\"),\n        lat,\n        lon\n      )\n    },\n    .progress = TRUE\n  ) |&gt;\n  list_rbind()\n\nSet Shape\n\nshape &lt;- municipality |&gt; read_municipality(year = 2022)\n\nPlot Data\n\nggplot() +\n  geom_sf(\n    data = shape,\n    fill = \"gray90\",\n    color = \"black\"\n  ) +\n  geom_point(\n    data = plot_data,\n    mapping = aes(x = lon, y = lat, color = class),\n    size = 0.01\n    # color = get_brand_color(\"blue\")\n  ) +\n  facet_wrap(~ class, ncol = 4) +\n  coord_sf(crs = 4326) +\n  scale_x_continuous(labels = NULL, breaks = NULL) +\n  scale_y_continuous(labels = NULL, breaks = NULL) +\n  scale_colour_brand_d() +\n  theme(legend.position = \"none\") +\n  labs(x = NULL, y = NULL, color = NULL)\n#&gt; Warning: Removed 275 rows containing missing values or values outside the scale range\n#&gt; (`geom_point()`)."
  },
  {
    "objectID": "index.html#citation",
    "href": "index.html#citation",
    "title": "",
    "section": "Citation",
    "text": "Citation\n\n\n\n\n\n\nWhen using this data, you must also cite the original data sources.\n\n\n\nTo cite this work, please use the following format:\nCaldeira, G., Penz, C., Vartanian, D., Fernandes, C. N., & Giannotti, M. A. (2025). A reproducible pipeline for processing and geocoding CNPJs from the Annual Social Information Report (RAIS) of the Brazilian Ministry of Labor and Employment (MTE) [Computer software]. Center for Metropolitan Studies of the University of São Paulo. https://cem-usp.github.io/rais-cnpj-geocoding\nA BibTeX entry for LaTeX users is\n@software{caldeira2025,\n  title = {A reproducible pipeline for processing and geocoding CNPJs from the Annual Social Information Report (RAIS) of the Brazilian Ministry of Labor and Employment (MTE)},\n  author = {{Gabriel Caldeira} and {Clara Penz} and {Daniel Vartanian} and {Camila Nastari Fernandes} and {Mariana Abrantes Giannotti}},\n  year = {2025},\n  address = {São Paulo},\n  institution = {Center for Metropolitan Studies of the University of São Paulo},\n  langid = {en},\n  url = {https://cem-usp.github.io/rais-cnpj-geocoding}\n}"
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "",
    "section": "License",
    "text": "License\n\n \n\n\n\n\n\n\n\nThe original data sources may have their own license terms and conditions.\n\n\n\nThe code in this report is licensed under the GNU General Public License Version 3, while the report is available under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International.\nCopyright (C) 2025 Center for Metropolitan Studies\n\nThe code in this report is free software: you can redistribute it and/or\nmodify it under the terms of the GNU General Public License as published by the\nFree Software Foundation, either version 3 of the License, or (at your option)\nany later version.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY\nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\nPARTICULAR PURPOSE. See the GNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License along with\nthis program. If not, see &lt;https://www.gnu.org/licenses/&gt;."
  },
  {
    "objectID": "index.html#acknowledgments",
    "href": "index.html#acknowledgments",
    "title": "",
    "section": "Acknowledgments",
    "text": "Acknowledgments\n\n\n\n\n\nThis work is part of a research project by the Polytechnic School (Poli) of the University of São Paulo (USP), in partnership with the Secretariat for Food and Nutrition Security (SESAN) of the Ministry of Social Development, Family, and the Fight Against Hunger (MDS), titled: AcessoSAN: Mapping Food Access to Support Public Policies on Food and Nutrition Security and Hunger Reduction in Brazilian Cities.\n\n\n\n\n\n\nThis work was developed with support from the Center for Metropolitan Studies (CEM) based at the School of Philosophy, Letters and Human Sciences (FFLCH) of the University of São Paulo (USP) and at the Brazilian Center for Analysis and Planning (CEBRAP).\n\n\n\n\n\n\nThis study was financed, in part, by the São Paulo Research Foundation (FAPESP), Brazil. Process Number 2025/17879-2."
  },
  {
    "objectID": "index.html#references",
    "href": "index.html#references",
    "title": "",
    "section": "References",
    "text": "References\n\n\nAllaire, J. J., Teague, C., Xie, Y., & Dervieux, C. (n.d.). Quarto [Computer software]. Zenodo. https://doi.org/10.5281/ZENODO.5960048\n\n\nR Core Team. (n.d.). R: A language and environment for statistical computing [Computer software]. R Foundation for Statistical Computing. https://www.R-project.org\n\n\nUshey, K., & Wickham, H. (n.d.). renv: Project environments [Computer software]. https://doi.org/10.32614/CRAN.package.renv\n\n\nWickham, H. (2023). The tidy tools manifesto. Tidyverse. https://tidyverse.tidyverse.org/articles/manifesto.html\n\n\nWickham, H., Çetinkaya-Rundel, M., & Grolemund, G. (2023). R for data science: Import, tidy, transform, visualize, and model data (2nd ed.). O’Reilly Media. https://r4ds.hadley.nz"
  }
]